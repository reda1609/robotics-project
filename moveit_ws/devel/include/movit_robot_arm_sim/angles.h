// Generated by gencpp from file movit_robot_arm_sim/angles.msg
// DO NOT EDIT!


#ifndef MOVIT_ROBOT_ARM_SIM_MESSAGE_ANGLES_H
#define MOVIT_ROBOT_ARM_SIM_MESSAGE_ANGLES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movit_robot_arm_sim
{
template <class ContainerAllocator>
struct angles_
{
  typedef angles_<ContainerAllocator> Type;

  angles_()
    : values()  {
    }
  angles_(const ContainerAllocator& _alloc)
    : values(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _values_type;
  _values_type values;





  typedef boost::shared_ptr< ::movit_robot_arm_sim::angles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movit_robot_arm_sim::angles_<ContainerAllocator> const> ConstPtr;

}; // struct angles_

typedef ::movit_robot_arm_sim::angles_<std::allocator<void> > angles;

typedef boost::shared_ptr< ::movit_robot_arm_sim::angles > anglesPtr;
typedef boost::shared_ptr< ::movit_robot_arm_sim::angles const> anglesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movit_robot_arm_sim::angles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movit_robot_arm_sim::angles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::movit_robot_arm_sim::angles_<ContainerAllocator1> & lhs, const ::movit_robot_arm_sim::angles_<ContainerAllocator2> & rhs)
{
  return lhs.values == rhs.values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::movit_robot_arm_sim::angles_<ContainerAllocator1> & lhs, const ::movit_robot_arm_sim::angles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace movit_robot_arm_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::movit_robot_arm_sim::angles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movit_robot_arm_sim::angles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movit_robot_arm_sim::angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movit_robot_arm_sim::angles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movit_robot_arm_sim::angles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movit_robot_arm_sim::angles_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movit_robot_arm_sim::angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2c9c4a808bfa8ef83980bb0222137bf";
  }

  static const char* value(const ::movit_robot_arm_sim::angles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2c9c4a808bfa8efULL;
  static const uint64_t static_value2 = 0x83980bb0222137bfULL;
};

template<class ContainerAllocator>
struct DataType< ::movit_robot_arm_sim::angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movit_robot_arm_sim/angles";
  }

  static const char* value(const ::movit_robot_arm_sim::angles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movit_robot_arm_sim::angles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] values\n"
;
  }

  static const char* value(const ::movit_robot_arm_sim::angles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movit_robot_arm_sim::angles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct angles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movit_robot_arm_sim::angles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movit_robot_arm_sim::angles_<ContainerAllocator>& v)
  {
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVIT_ROBOT_ARM_SIM_MESSAGE_ANGLES_H
